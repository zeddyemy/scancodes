from uuid import uuid4

from ..extensions import db
from ..enums.qrcode import QRCodeType
from ..utils.date_time import datetime, DateTimeUtils, to_gmt1_or_none

class QRCode(db.Model):
    """Model representing a QR code generated by a user, linked to a template and containing user-provided data."""
    __tablename__ = "qr_code"
    id = db.Column(db.String(50), primary_key=True, default=lambda: str(uuid4()))
    user_id = db.Column(db.Integer, db.ForeignKey('app_user.id'), nullable=False)
    template_id = db.Column(db.String(36), db.ForeignKey('template.id'), nullable=False)
    data_payload = db.Column(db.JSON, nullable=False)
    qr_code_image_url = db.Column(db.String(255), nullable=False)
    type = db.Column(db.String(150), nullable=True)
    created_at = db.Column(db.DateTime(timezone=True), default=DateTimeUtils.aware_utcnow)
    updated_at = db.Column(db.DateTime(timezone=True), default=DateTimeUtils.aware_utcnow, onupdate=DateTimeUtils.aware_utcnow)
    owner = db.relationship('AppUser', back_populates='qr_codes')
    template = db.relationship('Template', back_populates='qr_codes')

    def __repr__(self) -> str:
        return f'<QrCode {self.id} for User {self.user_id}>'

    def to_dict(self) -> dict:
        """Return a dictionary representation of the QRCode instance."""
        return {
            'id': self.id,
            'type': self.type,
            'data_payload': self.data_payload,
            'qr_code_image_url': self.qr_code_image_url,
            'created_at': to_gmt1_or_none(self.created_at),
            'updated_at': to_gmt1_or_none(self.updated_at),
        }

class Template(db.Model):
    """Model representing a QR code template, including schema for validation and preview image."""
    __tablename__ = 'template'
    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid4()))
    name = db.Column(db.String(80), unique=True, nullable=False)
    description = db.Column(db.Text, nullable=True)
    type = db.Column(db.String(150), nullable=True)
    schema_definition = db.Column(db.JSON, nullable=False)  # JSON schema for data validation
    preview_url = db.Column(db.String(255), nullable=True)
    created_at = db.Column(db.DateTime(timezone=True), default=DateTimeUtils.aware_utcnow)
    updated_at = db.Column(db.DateTime(timezone=True), default=DateTimeUtils.aware_utcnow, onupdate=DateTimeUtils.aware_utcnow)
    qr_codes = db.relationship('QRCode', back_populates='template', lazy=True)

    def __repr__(self):
        return f'<Template {self.name}>'

    def to_dict(self) -> dict:
        """Return a dictionary representation of the Template instance."""
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'type': self.type,
            'schema_definition': self.schema_definition,
            'preview_url': self.preview_url,
            'created_at': to_gmt1_or_none(self.created_at),
            'updated_at': to_gmt1_or_none(self.updated_at),
        }