from uuid import uuid4

from ..extensions import db
from ..enums.qrcode import QRCodeType
from ..utils.date_time import datetime, DateTimeUtils, to_gmt1_or_none

class Club(db.Model):
    """Model representing a club that can employ DJs and have QR codes."""
    __tablename__ = 'club'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False, unique=True)
    logo_url = db.Column(db.String(255), nullable=True)
    description = db.Column(db.Text, nullable=True)
    djs = db.relationship('DJ', back_populates='club', lazy=True)
    qr_codes = db.relationship('QRCode', back_populates='club', lazy=True)

    def __repr__(self):
        return f'<Club {self.name}>'

class DJ(db.Model):
    """Model representing a DJ, who may be personal or under a club."""
    __tablename__ = 'dj'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    logo_url = db.Column(db.String(255), nullable=True)
    user_id = db.Column(db.Integer, db.ForeignKey('app_user.id'), nullable=False)
    club_id = db.Column(db.Integer, db.ForeignKey('club.id'), nullable=True)
    club = db.relationship('Club', back_populates='djs')
    qr_codes = db.relationship('QRCode', back_populates='dj', lazy=True)

    def __repr__(self):
        return f'<DJ {self.name}>'

# Update QRCode to link to DJ and Club
class QRCode(db.Model):
    """Model representing a QR code generated by a user, linked to a template and containing user-provided data."""
    __tablename__ = "qr_code"
    id = db.Column(db.String(50), primary_key=True, default=lambda: str(uuid4()))
    user_id = db.Column(db.Integer, db.ForeignKey('app_user.id'), nullable=False)
    template_id = db.Column(db.String(36), db.ForeignKey('template.id'), nullable=False)
    data_payload = db.Column(db.JSON, nullable=False)
    qr_code_image_url = db.Column(db.String(255), nullable=False)
    type = db.Column(db.String(150), nullable=True)
    dj_id = db.Column(db.Integer, db.ForeignKey('dj.id'), nullable=True)
    club_id = db.Column(db.Integer, db.ForeignKey('club.id'), nullable=True)
    created_at = db.Column(db.DateTime(timezone=True), default=DateTimeUtils.aware_utcnow)
    updated_at = db.Column(db.DateTime(timezone=True), default=DateTimeUtils.aware_utcnow, onupdate=DateTimeUtils.aware_utcnow)
    owner = db.relationship('AppUser', back_populates='qr_codes')
    template = db.relationship('Template', back_populates='qr_codes')
    dj = db.relationship('DJ', back_populates='qr_codes')
    club = db.relationship('Club', back_populates='qr_codes')

    def __repr__(self) -> str:
        return f'<QrCode {self.id} for User {self.user_id}>'

    def to_dict(self) -> dict:
        """Return a dictionary representation of the QRCode instance."""
        return {
            'id': self.id,
            'type': self.type,
            'data_payload': self.data_payload,
            'qr_code_image_url': self.qr_code_image_url,
            'dj_id': self.dj_id,
            'club_id': self.club_id,
            'created_at': to_gmt1_or_none(self.created_at),
            'updated_at': to_gmt1_or_none(self.updated_at),
        }

class Template(db.Model):
    """Model representing a QR code template, including schema for validation and preview image."""
    __tablename__ = 'template'
    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid4()))
    name = db.Column(db.String(80), unique=True, nullable=False)
    description = db.Column(db.Text, nullable=True)
    type = db.Column(db.String(150), nullable=True)
    schema_definition = db.Column(db.JSON, nullable=False)  # JSON schema for data validation
    preview_url = db.Column(db.String(255), nullable=True)
    created_at = db.Column(db.DateTime(timezone=True), default=DateTimeUtils.aware_utcnow)
    updated_at = db.Column(db.DateTime(timezone=True), default=DateTimeUtils.aware_utcnow, onupdate=DateTimeUtils.aware_utcnow)
    qr_codes = db.relationship('QRCode', back_populates='template', lazy=True)

    def __repr__(self):
        return f'<Template {self.name}>'

    def to_dict(self) -> dict:
        """Return a dictionary representation of the Template instance."""
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'type': self.type,
            'schema_definition': self.schema_definition,
            'preview_url': self.preview_url,
            'created_at': to_gmt1_or_none(self.created_at),
            'updated_at': to_gmt1_or_none(self.updated_at),
        }

class MusicRequest(db.Model):
    """Model for music requests and shoutouts, linked to QR code, user, DJ, and club."""
    __tablename__ = 'music_request'
    id = db.Column(db.Integer, primary_key=True)
    qr_code_id = db.Column(db.String(50), db.ForeignKey('qr_code.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('app_user.id'), nullable=False)
    dj_id = db.Column(db.Integer, db.ForeignKey('dj.id'), nullable=True)
    club_id = db.Column(db.Integer, db.ForeignKey('club.id'), nullable=True)
    type = db.Column(db.String(32), nullable=False)  # 'music_request' or 'shoutout'
    song_title = db.Column(db.String(255), nullable=True)
    message = db.Column(db.Text, nullable=True)
    tip_amount = db.Column(db.Numeric(14, 2), nullable=True)
    created_at = db.Column(db.DateTime(timezone=True), default=DateTimeUtils.aware_utcnow)
    # Relationships
    qr_code = db.relationship('QRCode', backref='music_requests')
    user = db.relationship('AppUser')
    dj = db.relationship('DJ')
    club = db.relationship('Club')

    def __repr__(self):
        return f'<MusicRequest {self.type} by User {self.user_id}>'

    def to_dict(self):
        return {
            'id': self.id,
            'qr_code_id': self.qr_code_id,
            'user_id': self.user_id,
            'dj_id': self.dj_id,
            'club_id': self.club_id,
            'type': self.type,
            'song_title': self.song_title,
            'message': self.message,
            'tip_amount': float(self.tip_amount) if self.tip_amount else None,
            'created_at': to_gmt1_or_none(self.created_at),
        }

class Notification(db.Model):
    """Model for notifications sent to DJs when a request or shoutout is made."""
    __tablename__ = 'notification'
    id = db.Column(db.Integer, primary_key=True)
    dj_id = db.Column(db.Integer, db.ForeignKey('dj.id'), nullable=False)
    music_request_id = db.Column(db.Integer, db.ForeignKey('music_request.id'), nullable=False)
    type = db.Column(db.String(32), nullable=False)  # 'music_request' or 'shoutout'
    message = db.Column(db.Text, nullable=False)
    is_read = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime(timezone=True), default=DateTimeUtils.aware_utcnow)
    # Relationships
    dj = db.relationship('DJ', backref='notifications')
    music_request = db.relationship('MusicRequest')

    def __repr__(self):
        return f'<Notification {self.type} for DJ {self.dj_id}>'

    def to_dict(self):
        return {
            'id': self.id,
            'dj_id': self.dj_id,
            'music_request_id': self.music_request_id,
            'type': self.type,
            'message': self.message,
            'is_read': self.is_read,
            'created_at': to_gmt1_or_none(self.created_at),
        }